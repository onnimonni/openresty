# Run nginx with the user created just for this container
user nginx nginx;

# Default error logging rule
error_log /var/log/nginx/error.log warn;

pid /var/run/nginx.pid;

# How many worker threads to run;
# "auto" sets it to the number of CPU cores available in the system, and
# offers the best performance. Don't set it higher than the number of CPU
# cores if changing this parameter.

# The maximum number of connections for Nginx is calculated by:
# max_clients = worker_processes * worker_connections
worker_processes auto;

# Maximum open file descriptors per process;
# should be > worker_connections.
worker_rlimit_nofile 8192;

events {
  # When you need > 8000 * cpu_cores connections, you start optimizing your OS,
  # and this is probably the point at which you hire people who are smarter than
  # you, as this is *a lot* of requests.
  worker_connections 8000;
}

# Set custom enviromental variables that we need with lua here
# These are used to dynamically load
env PORT;
env WEB_ROOT;
env NGINX_MAX_BODY_SIZE;
env NGINX_TIMEOUT;

http {

  # Hide nginx version information.
  server_tokens off;

  # How long to allow each connection to stay idle; longer values are better
  # for each individual client, particularly for SSL, but means that worker
  # connections are tied up longer. (Default: 65)
  keepalive_timeout 20;

  # Speed up file transfers by using sendfile() to copy directly
  # between descriptors rather than using read()/write().
  sendfile        on;

  # Tell Nginx not to send out partial frames; this increases throughput
  # since TCP frames are filled up before being sent out. (adds TCP_CORK)
  tcp_nopush      on;

  # Gzip all the assets
  include gzip.conf;

  include    /etc/nginx/mime.types;
  include    /etc/nginx/fastcgi.conf;
  default_type application/octet-stream;
  client_body_temp_path /tmp/nginx/body 1 2;
  fastcgi_temp_path /tmp/nginx/fastcgi_temp 1 2;

  # A new log format for detecting bad bots.
  log_format blocked '[$time_local] Blocked request from $http_x_real_ip $request';

  # This log format makes it so we can see real requester's IP address \
  # not just the reverse proxy server's IP address. Also note, that \
  # "specialLog" can be replaced with any name you would like to \
  # give to this log format.
  log_format main '[$time_local] $http_x_real_ip '
                        '"$request" $status $body_bytes_sent $request_time '
                        '"$http_referer" "$http_user_agent"';

  # Load upstreams from one file which can be overwritten depending on situation
  include upstreams.conf;

  # Include custom nginx http additions from project
  include ${NGINX_INCLUDE_DIR}/http/*.conf;

  # Add few headers which make XSS harder
  include security_headers.conf;

  # If $PORT != 80 means that we are behind reverse proxy as well
  # This directive helps that we don't redirect clients into mysite.com:8080/resource type urls
  port_in_redirect off;

  server {
    # Allow bigger default file uploads
    client_max_body_size ${NGINX_MAX_BODY_SIZE};

    listen  ${PORT};
    root    ${WEB_ROOT};
    index   index.php;
    access_log /var/log/nginx/access.log main;
    error_log stderr;

    # Blocked log file
    set $blocked_log /var/log/nginx/blocked.log;

    disable_symlinks off;

    # Include custom nginx server additions from mountable path
    include ${NGINX_INCLUDE_DIR}/server/*.conf;

    # Return 404 page from wordpress instead of nginx "403 Forbidden" page
    error_page 403 = @index;

    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
        try_files $uri @index;
    }

    location = /favicon.ico {
        allow all;
        log_not_found off;
        access_log off;
        try_files $uri @index;
    }

    # deny all dot-files including git
    location ~ /\. {
        deny all;
        log_not_found off;
        access_log off;
    }

    location / {

        ##
        # Basic Security aginst wpscan:
        # - Block hackers from enumerating users
        ##
        if ( $arg_author ~ "([0-9]*)" ) {
          access_log $blocked_log blocked;
          return 403;
        }

        try_files $uri $uri/ /wp/$uri /wp/$uri/ @index;
    }

    # Static WordPress files - try wp- files from /wp/ first to save file access time
    location ~* ^/wp-(.*)\.(css|js|jpe?g|gif|ico|png|otf|ttf|eot|woff|svg|webp)$ {

        include static_files.conf;

        try_files /wp/$uri $uri @index;
    }

    # Static Normal files - try direct access first and then inside /wp/ folder
    location ~* \.(css|js|jpe?g|gif|ico|png|otf|ttf|eot|woff|svg|webp)$ {

        include static_files.conf;

        try_files $uri /wp/$uri @index;
    }

    # App folder contains our plugins and themes
    # We want to server assets here but deny php execution
    location /app/ {
        try_files $uri @index;

        ##
        # Deny access into php files under /app/
        ##
        location ~ \.php$ {
            access_log $blocked_log blocked;
            deny all;
        }
    }

    ##
    # Run all php files from wp subfolder
    # This is how wordpress is supposed to be run
    # It also prevents direct access to possibly insecure code inside our plugins
    ##
    location ~ \.php$ {
        try_files /wp/$uri @index;

        include fastcgi_settings.conf;

        # Append subfolder automatically
        fastcgi_param SCRIPT_FILENAME $document_root/wp$fastcgi_script_name;

        # Handover 404 errors from php-fpm to WordPress
        error_page 404 = @index;

        fastcgi_pass php-fpm;
    }

    location @index {
        include fastcgi_settings.conf;
        fastcgi_param SCRIPT_FILENAME $document_root/wp/index.php;

        # Give sane max execution time to frontend requests
        fastcgi_read_timeout ${NGINX_TIMEOUT};

        fastcgi_pass php-fpm;
    }

    # WordPress is stupid
    location = /wp-admin { rewrite ^ /wp-admin/ permanent; }

    location = / {
        rewrite ^ /index.php$is_args$args last;
    }

    # Prevent /wp/wp/wp/... rewrite loops
    location ^~ /wp/ {
        rewrite ^/wp/(.*)$ $1$is_args$args last;
    }

    # Block some vulnerabilities always
    include security.conf;
  }
}
